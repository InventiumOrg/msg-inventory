// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: inventory.sql

package db

import (
	"context"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventory (
    name, quantity, category, located
) VALUES (
    $1, $2, $3, $4
) RETURNING id, pos_id, name, quantity, category, located, created_at
`

type CreateInventoryParams struct {
	Name     string `json:"name"`
	Quantity int32  `json:"quantity"`
	Category string `json:"category"`
	Located  string `json:"located"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, createInventory,
		arg.Name,
		arg.Quantity,
		arg.Category,
		arg.Located,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.PosID,
		&i.Name,
		&i.Quantity,
		&i.Category,
		&i.Located,
		&i.CreatedAt,
	)
	return i, err
}

const deleteInventory = `-- name: DeleteInventory :exec

DELETE FROM inventory
WHERE id = $1
`

// -- name: UpdateInventoryPOS :one
// UPDATE inventory
// SET quantity = $3
// WHERE pos_id = $1
// AND id = $1
// RETURNING *;
func (q *Queries) DeleteInventory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInventory, id)
	return err
}

const getInventory = `-- name: GetInventory :one
SELECT id, pos_id, name, quantity, category, located, created_at FROM inventory 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInventory(ctx context.Context, id int64) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getInventory, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.PosID,
		&i.Name,
		&i.Quantity,
		&i.Category,
		&i.Located,
		&i.CreatedAt,
	)
	return i, err
}

const listInventories = `-- name: ListInventories :many

SELECT id, pos_id, name, quantity, category, located, created_at FROM inventory
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListInventoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: GetInventoryByPOS :one
// SELECT * FROM inventory
// WHERE pos_id = $1 LIMIT 1;
func (q *Queries) ListInventories(ctx context.Context, arg ListInventoriesParams) ([]Inventory, error) {
	rows, err := q.db.QueryContext(ctx, listInventories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.ID,
			&i.PosID,
			&i.Name,
			&i.Quantity,
			&i.Category,
			&i.Located,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventory = `-- name: UpdateInventory :one

UPDATE inventory
SET quantity = $2
WHERE id = $1
RETURNING id, pos_id, name, quantity, category, located, created_at
`

type UpdateInventoryParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
}

// -- name: ListInventoriesByPOS :many
// SELECT * FROM inventory
// WHERE pos_id = $2
// ORDER BY id
// LIMIT $1
// OFFSET $3;
func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, updateInventory, arg.ID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.PosID,
		&i.Name,
		&i.Quantity,
		&i.Category,
		&i.Located,
		&i.CreatedAt,
	)
	return i, err
}
